:: Sorting Algorithms
function bubble_sort(list)
  initiate n = len(list);
  for i = 0 to n - 1 THEN
    for j = 0 to n - i - 2) THEN
      if list/j > list/(j + 1) THEN
        initiate temp = list/j;
        list/j = list/(j + 1);
        list/(j + 1) = temp;
      END
    END
  END
  return list;
END


function selection_sort(list)
  initiate n = len(list);
  for i = 0 to n - 2 THEN
    initiate min_idx = i;
    for j = i + 1 to n - 1 THEN
      if list[j] < list[min_idx] THEN
        min_idx = j;
      END
    END
    initiate temp = list[min_idx];
    list[min_idx] = list[i];
    list[i] = temp;
  END
  return list;
END

function insertion_sort(list)
  for i = 1 to len(list) - 1 THEN
    initiate key = list[i];
    initiate j = i - 1;
    while j >= 0 and list[j] > key THEN
      list[j + 1] = list[j];
      j = j - 1;
    END
    list[j + 1] = key;
  END
  return list;
END

function merge(left, right)
  initiate result = [];
  initiate i = 0;
  initiate j = 0;

  while i < len(left) and j < len(right) THEN
    if left[i] <= right[j] THEN
      result = push(result, left[i]);
      i = i + 1;
    else THEN
      result = push(result, right[j]);
      j = j + 1;
    END
  END

  while i < len(left) THEN
    result = push(result, left[i]);
    i = i + 1;
  END

  while j < len(right) THEN
    result = push(result, right[j]);
    j = j + 1;
  END

  return result;
END

function merge_sort(list)
  if len(list) <= 1 THEN
    return list;
  END

  initiate mid = len(list) / 2;
  initiate left = merge_sort(slice(list, 0, mid));
  initiate right = merge_sort(slice(list, mid, len(list)));

  return merge(left, right);
END

function quick_sort(list)
  if len(list) <= 1 THEN
    return list;
  END

  initiate pivot = list[len(list) / 2];
  initiate left = [];
  initiate right = [];
  initiate equal = [];

  for item in list THEN
    if item < pivot THEN
      left = push(left, item);
    elif item > pivot THEN
      right = push(right, item);
    else THEN
      equal = push(equal, item);
    END
  END

  return merge(quick_sort(left), merge(equal, quick_sort(right)));
END

function count_sort(list)
  if len(list) == 0 THEN
    return [];
  END

  initiate max_val = max(list);
  initiate count = [];

  for i = 0 to max_val THEN
    count = push(count, 0);
  END

  for num in list THEN
    count[num] = count[num] + 1;
  END

  initiate sorted_list = [];
  for i = 0 to len(count) - 1 THEN
    while count[i] > 0 THEN
      sorted_list = push(sorted_list, i);
      count[i] = count[i] - 1;
    END
  END

  return sorted_list;
END

function counting_sort_for_radix(list, exp)
  initiate n = len(list);
  initiate output = [];
  initiate count = [];

  for i = 0 to 9 THEN
    count = push(count, 0);
    output = push(output, 0);
  END

  for i = 0 to n - 1 THEN
    index = (list[i] / exp) % 10;
    count[index] = count[index] + 1;
  END

  for i = 1 to 9 THEN
    count[i] = count[i] + count[i - 1];
  END

  i = n - 1;
  while i >= 0 THEN
    index = (list[i] / exp) % 10;
    output[count[index] - 1] = list[i];
    count[index] = count[index] - 1;
    i = i - 1;
  END

  for i = 0 to n - 1 THEN
    list[i] = output[i];
  END

  return list;
END

function radix_sort(list)
  if len(list) == 0 THEN
    return list;
  END

  initiate max_val = max(list);
  initiate exp = 1;

  while max_val / exp > 0 THEN
    list = counting_sort_for_radix(list, exp);
    exp = exp * 10;
  END

  return list;
END

:: Searching Algorithms
function linear_search(list, target)
  for i = 0 to len(list) - 1 THEN
    if list[i] == target THEN
      return i;
    END
  END
  return -1;
END

function binary_search(list, target)
  initiate low = 0;
  initiate high = len(list) - 1;

  while low <= high THEN
    initiate mid = (low + high) / 2;
    if list[mid] == target THEN
      return mid;
    elif list[mid] < target THEN
      low = mid + 1;
    else THEN
      high = mid - 1;
    END
  END

  return -1;
END

function jump_search(list, target)
  initiate n = len(list);
  initiate step = sqrt(n);
  initiate prev = 0;

  while list[min(step, n) - 1] < target THEN
    prev = step;
    step = step + sqrt(n);
    if prev >= n THEN
      return -1;
    END
  END

  while list[prev] < target THEN
    prev = prev + 1;
    if prev == min(step, n) THEN
      return -1;
    END
  END

  if list[prev] == target THEN
    return prev;
  END

  return -1;
END

function interpolation_search(list, target)
  initiate low = 0;
  initiate high = len(list) - 1;

  while low <= high and target >= list[low] and target <= list[high] THEN
    initiate pos = low + ((target - list[low]) * (high - low)) / (list[high] - list[low]);

    if list[pos] == target THEN
      return pos;
    elif list[pos] < target THEN
      low = pos + 1;
    else THEN
      high = pos - 1;
    END
  END

  return -1;
END

function exponential_search(list, target)
  if list[0] == target THEN
    return 0;
  END

  initiate i = 1;
  while i < len(list) and list[i] <= target THEN
    i = i * 2;
  END

  return binary_search(slice(list, i / 2, min(i, len(list))), target);
END
