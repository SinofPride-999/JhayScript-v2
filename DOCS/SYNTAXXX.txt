=====================
VARIABLE & DATA-TYPES
=====================

initiate int    = 21;
initiate string = "Hello World";
initiate float  = 4.10;
initiate list = [];

===========
COMMENTS
===========
:: This is a useful piece of Software 


=============
CONDITIONALS
=============

Jhayscript offers flexible conditional statements 
with both concise and block-style syntax.

BASIC SYNTAX
------------
Single-line conditionals (THEN keyword optional):
if condition statement [else statement]

Multi-line conditionals (requires THEN/END):
if condition THEN
    statements
[elif condition THEN
    statements]
[else THEN
    statements]
END

EXAMPLES
--------
1. SINGLE-LINE CONDITIONALS **
// THEN is optional for single-line
if x < 2 echo("Hello World");
if x < 2 echo("Hello") else echo("World");

2. MULTI-LINE CONDITIONALS **
// THEN required for multi-line blocks
if x < 2 THEN
    echo("Hello World");
    initiate y = x * 2;
elif x > 2 THEN
    echo("Hello Earth");
    initiate y = x / 2;
else THEN
    echo("Hello Universe");
    initiate y = 0;
END

3. ASSIGNING CONDITIONAL RESULTS **
// Single-line assignment
initiate greeting = if x < 2 THEN "Hello" else "Hi";

// Multi-line assignment 
initiate greeting = if x < 2 THEN
    "Hello World"
elif x > 2 THEN
    "Hello Earth"
else THEN
    "Hello Universe"
END

KEY NOTES
---------
- THEN is optional for single-line conditionals
- THEN is required when using multi-line blocks
- END is required to close multi-line blocks
- Parentheses around conditions are optional
- Semicolons are optional in block statements
- Indentation (4 spaces recommended) improves readability

BEST PRACTICES
--------------
1. Use multi-line format for complex conditionals
2. Prefer single-line only for trivial cases
3. Be consistent with THEN usage
4. Always include END for multi-line blocks
5. Indent nested conditionals clearly:
   
if x < 2 THEN
    if y < 2 THEN
        echo("Both small");
    else THEN
        echo("X small, Y big");
    END
END

===========
LOOPS
===========
FOR LOOPS ****
One-Liner **
for i = 0 to 10 THEN echo(i);

Multi-Liner **
for i = 0 to 10 THEN
  echo(i)
END

WHILE LOOPS ****
One-Liner **
while i < 10 THEN echo(i);
while True THEN echo("I am an infinite loop");

Multi-Liner **
while i < 10 THEN
  echo(i);
  initiate i = i + 1;
END

=======
LISTS
=======
initiate list_a = [1, 2, 3];
initiate list_b = [1, 2, 3];

GET INDEX **
echo(list_a/0)
echo(list_a/1)

===========
FUNCTIONS
===========
One-Liner **
function hello() -> echo("Hello World");
function greet(name) -> name + "Hello Universe";

Anonymous **
initiate hey = function() -> echo("Hello Earth");
hey();

Multi-Liner **
function hello()
  echo("Hello World");
END

===========
ASYNC
===========
:: Define an async function
async function fetchData(url)
    :: Simulate network delay
    sleep(1)
    return "Data from " + url
END


============
TRY / CATCH
============
EXCEPTION HANDLING

initiate x = 2

try THEN
  if x > 10 THEN
      echo("Big")
  elif x > 5 THEN
      echo("Medium")
  else
      echo("Small")
  END
catch(error) THEN
  echo("Error")
END



project-root/
├── DOCS/                  # Your documentation
├── jhayscript/            # All core modules go here
│   └── ...                # As above
├── tests/                 # Your unit or integration tests
├── main.py                # Entry point (calls `from jhayscript.shell import run`)
└── README.md              # Optional README for your repo



jhayscript/
├── __init__.py
├── shell.py               # Replaces jhayscript.py
├── basic.py               # Main interpreter logic
├── lexer.py               # Tokenizer
├── parser.py              # Parses tokens into an AST
├── runtime.py             # Execution environment or interpreter runtime
├── strings_with_arrows.py # For detailed error visualization
├── error.py               # Custom error classes (if any)
├── verbose_tool.py        # Optional verbose/debugging tools
├── utils.py               # Any shared helper functions
└── tokens.py              # Token types/constants (optional)





SYNTAX IDEAS

try/catch blocks **
  fuck_around THEN
    // code goes here
  find_out(error) THEN
    // code goes here
  THEN

IMPORTS **
default imports **
  import algo from 'algo';

named imports **
  import { bubble_sort, quick_sort } from 'algo';

alias imports **
  import { bubble_sort as sort } from 'algo';



jhayscript/
├── __init__.py
├── __pycache__/
├── core/
│   ├── __init__.py
│   ├── lexer.py
│   ├── parser.py
│   ├── interpreter.py
│   ├── nodes.py
│   ├── values.py
│   └── errors.py
├── modules/
│   ├── __init__.py
│   ├── algo.py       # Sorting/searching algorithms
│   ├── time.py       # Time functions
│   └── debug.py      # Debug utilities
├── jhayscript.py     # Shell/REPL
└── strings_with_arrows.py