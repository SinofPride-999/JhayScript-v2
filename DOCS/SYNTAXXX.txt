=====================
VARIABLE & DATA-TYPES
=====================
initiate int    = 21;
initiate string = "Hello World";
initiate float  = 4.10;
initiate list = [];

===========
COMMENTS
===========
:: This is a useful piece of Software 

=============
CONDITIONALS
=============
ONE LINER **
if x < 2 THEN echo("Hello World");

MULTI-LINER **
if x < 2 THEN
  echo("Hello World");
elif x > 2 THEN
  echo("Hello Earth");
else THEN
  echo("Hello Universe");
END

INITIATE THE VALUE RETURNED TO A VARIABLE **
initiate var = if x < 2 THEN echo("Hello World");

===========
LOOPS
===========
FOR LOOPS ****
One-Liner **
for i = 0 to 10 THEN echo(i);

Multi-Liner **
for i = 0 to 10 THEN
  echo(i)
END

WHILE LOOPS ****
One-Liner **
while i < 10 THEN echo(i);
while True THEN echo("I am an infinite loop");

Multi-Liner **
while i < 10 THEN
  echo(i);
  initiate i = i + 1;
END

=======
LISTS
=======
initiate list_a = [1, 2, 3];
initiate list_b = [1, 2, 3];

GET INDEX **
echo(list_a/0)
echo(list_a/1)

===========
FUNCTIONS
===========
One-Liner **
function hello() -> echo("Hello World");
function greet(name) -> name + "Hello Universe";

Anonymous **
initiate hey = function() -> echo("Hello Earth");
hey();

Multi-Liner **
function hello()
  echo("Hello World");
END



project-root/
├── DOCS/                  # Your documentation
├── jhayscript/            # All core modules go here
│   └── ...                # As above
├── tests/                 # Your unit or integration tests
├── main.py                # Entry point (calls `from jhayscript.shell import run`)
└── README.md              # Optional README for your repo



jhayscript/
├── __init__.py
├── shell.py               # Replaces jhayscript.py
├── basic.py               # Main interpreter logic
├── lexer.py               # Tokenizer
├── parser.py              # Parses tokens into an AST
├── runtime.py             # Execution environment or interpreter runtime
├── strings_with_arrows.py # For detailed error visualization
├── error.py               # Custom error classes (if any)
├── verbose_tool.py        # Optional verbose/debugging tools
├── utils.py               # Any shared helper functions
└── tokens.py              # Token types/constants (optional)





SYNTAX IDEAS

try/catch blocks **
  fuck_around THEN
    // code goes here
  find_out(error) THEN
    // code goes here
  THEN

IMPORTS **
default imports **
  import algo from 'algo';

named imports **
  import { bubble_sort, quick_sort } from 'algo';

alias imports **
  import { bubble_sort as sort } from 'algo';



jhayscript/
├── __init__.py
├── __pycache__/
├── core/
│   ├── __init__.py
│   ├── lexer.py
│   ├── parser.py
│   ├── interpreter.py
│   ├── nodes.py
│   ├── values.py
│   └── errors.py
├── modules/
│   ├── __init__.py
│   ├── algo.py       # Sorting/searching algorithms
│   ├── time.py       # Time functions
│   └── debug.py      # Debug utilities
├── jhayscript.py     # Shell/REPL
└── strings_with_arrows.py