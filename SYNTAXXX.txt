=====================
VARIABLE & DATA-TYPES
=====================
initiate int    = 21;
initiate string = "Hello World";
initiate float  = 4.10;
initiate list = [];

===========
COMMENTS
===========
:: This is a useful piece of Software 

=============
CONDITIONALS
=============
ONE LINER **
if x < 2 THEN echo("Hello World");

MULTI-LINER **
if x < 2 THEN
  echo("Hello World");
elif x > 2 THEN
  echo("Hello Earth");
else THEN
  echo("Hello Universe");
END

INITIATE THE VALUE RETURNED TO A VARIABLE **
initiate var = if x < 2 THEN echo("Hello World");

===========
LOOPS
===========
FOR LOOPS ****
One-Liner **
for i = 0 to 10 THEN echo(i);

Multi-Liner **
for i = 0 to 10 THEN
  echo(i)
END

WHILE LOOPS ****
One-Liner **
while i < 10 THEN echo(i);
while True THEN echo("I am an infinite loop");

Multi-Liner **
while i < 10 THEN
  echo(i);
  initiate i = i + 1;
END

=======
LISTS
=======
initiate list_a = [1, 2, 3];
initiate list_b = [1, 2, 3];

GET INDEX **
echo(list_a/0)
echo(list_a/1)

===========
FUNCTIONS
===========
One-Liner **
function hello() -> echo("Hello World");
function greet(name) -> name + "Hello Universe";

Anonymous **
initiate hey = function() -> echo("Hello Earth");
hey();

Multi-Liner **
function hello()
  echo("Hello World");
END











I dont want to implement single line version

SYNTAX IDEAS
try/catch blocks
fuck_around THEN
  // code goes here
find_out(error) THEN
  // code goes here
THEN
