#################################################
#
#   MAP =
#       | means OR
#       * zero or more of what is before it, can be null(optional)
#       ? optional
#       + one or more of what is before it, can't null(optional)
#       : or
#
#################################################

statements  : NEWLINE* expr (NEWLINE+ expr)* NEWLINE*

expr        :   KEYWORD:VAR IDENTIFIER EQ expr
            :   comp-expr ((KEYWORD:AND | KEYWORD:OR) comp-expr)*

comp-expr   :   NOT comp-expr
            :   arith-expr ((EE | LT | GT | LTE | GTE) arith-expr)*

arith-expr  :   term ((PLUS | MINUS) term)*

term        :   factor ((MUL | DIV) factor)*

factor      :   INT | FLOAT
            :   (PLUS | MINUS) factor
            :   LPAREN expr 
            :   power

power       :   call (POW factor)*

call        :   atom (LPAREN (expr (COMMA expr)*)? RPAREN)
          
atom        :   INT | FLOAT | STRING | IDENTIFIER
            :   LPAREN expr RPAREN
            :   list-expr
            :   if-expr
            :   for-expr
            :   while-expr
            :   func-def

list-expr   :   LSQUARE (expr (COMMA expr)*)? RSQUARE
               

if-expr     :   KEYWORD: IF expr | KEYWORD: THEN
               (expr if-expr-b|if-expr-c)?
            :  (NEWLINE statements KEYWORD:END if-expr-b|if-expr-c)*


for-expr    :   KEYWORD: FOR IDENTIFIER EQ expr KEYWORD: TO expr
               (KEYWORD: STEP expr)?  KEYWORD: THEN expr
               

while-expr  :   KEYWORD: WHILE expr KEYWORD: THEN expr

func-def    :   KEYWORD: ARISE IDENTIFIER?
                LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                ARROW expr